#+STARTIP: overview
* interface tweaks 
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
(fset 'yes-or-no-p 'y-or-n-p)
(require 'org-tempo)

#+END_SRC

adjust the window size and transparency
#+begin_src emacs-lisp
(when window-system (set-frame-size (selected-frame) 160 50))
 (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
 (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src

#+RESULTS:
: ((alpha 85 . 50) (alpha 80 . 50) (alpha 95 . 50) (vertical-scroll-bars))

* Org
  #+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  #+end_src

  #+RESULTS:
  : org-capture

* try
#+begin_src emacs-lisp
  (use-package try
  :ensure t)  
#+end_src


* which key
  Brings up some help 
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src 


* rest
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq make-backup-files nil)

(set-face-attribute 'default nil :height 170)

;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (python . t)
   (plantuml . t)))



(setq org-plantuml-jar-path
      (expand-file-name "/Users/cbernie/Documents/emacs-ext/plantuml.jar"))

(use-package swiper
  :ensure t
  :config
  (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     
     (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

;;(use-package gruvbox-theme
;;  :init (load-theme 'gruvbox-dark-soft t))
;;(use-package color-theme
;;  :ensure t)


(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))

(setq split-width-threshold 1)
#+end_src


* Reveal.js
  #+begin_src emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)
    
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t)
    
    (use-package htmlize
    :ensure t)
  #+end_src





* Flycheck
  #+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
  
  #+end_src

  #+RESULTS:



* Udo Tree
  #+begin_src emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))

  #+end_src

 
* Web Search
  #+begin_src emacs-lisp
  (setq eww-search-prefix "https://cn.bing.com/search?q=")

  (use-package engine-mode
  :ensure t
  :init
  (engine-mode t))
  

  (defengine bing
  "https://cn.bing.com/search?q=%s&ensearch=1"
  :keybinding "b")
  #+end_src


* YoudaoDictionary
  #+begin_src emacs-lisp
  (use-package youdao-dictionary
  :ensure t
  :config
  (setq url-automatic-caching t)
  (global-set-key (kbd "C-c y") 'youdao-dictionary-search-at-point))
  #+end_src

* BaiduTranslate
want to execute add emacs-lisp
  #+begin_src
  (use-package unicode-escape
  :ensure t)
  (use-package baidu-translate
  :ensure t
  :config
  (setq baidu-translate-appid "20200904000558925")
  (setq baidu-translate-security "lsRCbERLnqSEQrnSLo4h"))
  
  #+end_src


* Google translate
whant to execute add emacs-lisp
  #+begin_src
    (use-package google-translate
    :ensure t)
    (use-package google-translate-default-ui
    :ensure t)
    (setq google-translate-base-url "http://translate.google.cn/translate_a/single")
    (setq google-translate-listen-url "http://translate.google.cn/translate_tts")
    (setq google-translate--tkk-url "http://translate.google.cn")
    ;;配置默认语言
    (setq google-translate-default-source-language "en")
    (setq google-translate-default-target-language "zh-CN")
    (setq-default google-translate-enable-ido-completion t)
  #+end_src

  #+RESULTS:
  : t


 
* Web Mode
  #+begin_src emacs-lisp
  (use-package web-mode
  :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
      '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
      '(("css" . (ac-source-css-property))
        ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
  #+end_src




* Org Agenda
  #+begin_src emacs-lisp
(load-library "find-lisp")
(setq org-agenda-files (find-lisp-find-files "~/Documents/TeckDoc/Org/" "\.org$"))
  #+end_src


